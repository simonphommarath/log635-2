%start S

S[SEM = <app(?vp, ?suj)>] -> NP[SEM=?suj] VP[SEM=?vp]
S[SEM = <app(?pp, ?vp2, ?suj)>] -> NP[SEM=?suj] RC[SEM=?rc] VP[SEM=?vp2]
S[SEM = <app(?vp, ?suj)>] -> NP[SEM=?suj] Det VP[SEM=?vp]

# VP - Verb Phrase
VP[SEM = <app(?v, ?pp)>] -> V[SEM=?v] Ppart[SEM=?pp]
VP[SEM = <app(?v, ?np)>] -> V[SEM=?v] NP[SEM=?np]
VP[SEM = <app(?v, ?np)>] -> V[SEM=?v] Adj[SEM=?adj] PP[SEM=?np]
VP[SEM = <app(?v, ?pp)>] -> V[SEM=?v] PP[SEM=?pp]
VP[SEM = <app(?v, ?np)>] -> V[SEM=?v] Det NP[SEM=?np] Adj[SEM=?adj]
VP[SEM = <app(?v, ?np)>] -> V[SEM=?v] P NP[SEM=?np]
VP[SEM = <app(?v, ?np)>] -> V[SEM=?v] Adj[SEM=?np]

# NP - Noune Phrase
NP[SEM = ?np] -> Nprop[SEM = ?np]
NP[SEM = ?np] -> N[SEM = ?np]
NP[SEM = ?np] -> Det NP[SEM = ?np]
NP[SEM = ?nb] -> NUM[SEM=?nb] NP
NP[SEM = ?np] -> NP[SEM=?np] PP

# V - Verb
V[SEM = <\P.\x.(subject (x) and P(x))>] -> 'est'
V[SEM = <\P.\x.(subject (x) and P(x))>] -> 'était'
V[SEM = <\P.\x.(subject (x) and P(x))>] -> 'a'
V[SEM = <\y.\x.(subject (x) and consume (x, y))>] -> 'consume'
V[SEM = <\x.(subject (x) and atteint (x))>] -> 'atteint'

# NB - Nombre
NUM[SEM = <#NUM#>] -> '#NUM#'

# PP - Prepositional phrase
PP[SEM = ?np] -> P NP[SEM=?np]

# P - Participle
P -> 'de' | 'au' | 'sur' | 'à'

# Ppart - Past Participle
Ppart[SEM = <\x.brule (x)>] -> 'brûlé' | 'flambé'
Ppart[SEM = <\x.froid (x)>] -> 'froid'
Ppart[SEM = <\x.teinture (x)>] -> 'teindues'

# ADJ - Adjectiv
Adj[SEM = <mort>] -> 'mort'
Adj[SEM = <bleu>] -> 'bleus'
Adj[SEM = <innocent>] -> 'innocent'

# N - Noune
N[SEM = <corps>] -> 'corps'
N[SEM = <kmh>] -> 'km/h'
N[SEM = <km>] -> 'km'
N[SEM = <litre>] -> 'litre'
N[SEM = <victime>] -> 'victime'
N[SEM = <cheveux>] -> 'cheveux'
N[SEM = <scène>] -> 'scène'

# Nprop - Noune proper?
Nprop[SEM = <Naboo>] -> 'Naboo'
Nprop[SEM = <Obi>] -> 'Obi'
Nprop[SEM = <millenium>] -> 'millenium-falcon' | 'millenium'
Nprop[SEM = <Han>] -> 'Han'
Nprop[SEM = <Jyn>] -> 'Jyn'

# Det
Det -> 'la' | 'La' | 'une' | 'Une'
Det -> 'le' | 'Le' | 'un' | 'Un'
Det -> 'les' | 'Les'
Det -> 'les' | 'Les'

# RC - Relative clause
RC[SEM = ?vp] -> RP VP[SEM=?vp]

# RP - Relative pronoun
RP -> 'qui'
